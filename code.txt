create database customer_segmentation;
use database customer_segmentation;

-- Creating the Customers table
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    Name VARCHAR(100),
    Age INT,
    Gender VARCHAR(10),
    SignupDate DATE,
    CustomerSegment VARCHAR(50)
);

-- Creating the Orders table
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    OrderDate DATE,
    TotalAmount DECIMAL(10,2),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

-- Creating the OrderDetails table
CREATE TABLE OrderDetails (
    OrderDetailID INT PRIMARY KEY,
    OrderID INT,
    ProductID INT,
    Quantity INT,
    Price DECIMAL(10,2),
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),
    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)
);

-- Creating the Products table
CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(100),
    Category VARCHAR(50),
    Price DECIMAL(10,2)
);

-- Creating the CustomerEngagement table
CREATE TABLE CustomerEngagement (
    EngagementID INT PRIMARY KEY,
    CustomerID INT,
    LastPurchaseDate DATE,
    TotalOrders INT,
    TotalSpent DECIMAL(10,2),
    LastEngagementDate DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);

-- Inserting data into Customers
INSERT INTO Customers VALUES
(1, 'Alice Johnson', 32, 'Female', '2020-01-15', 'High-Value'),
(2, 'Bob Smith', 45, 'Male', '2019-03-22', 'Medium-Value'),
(3, 'Charlie Brown', 29, 'Male', '2021-07-08', 'Low-Value'),
(4, 'Diana Prince', 38, 'Female', '2018-06-12', 'High-Value'),
(5, 'Ethan Hunt', 50, 'Male', '2017-11-02', 'Medium-Value');

-- Inserting data into Orders
INSERT INTO Orders VALUES
(101, 1, '2024-01-05', 200.00),
(102, 2, '2024-01-06', 150.00),
(103, 3, '2024-01-07', 75.00),
(104, 1, '2024-01-08', 300.00),
(105, 4, '2024-01-09', 500.00);

-- Inserting data into Products
INSERT INTO Products VALUES
(1, 'Laptop', 'Electronics', 1000.00),
(2, 'Phone', 'Electronics', 500.00),
(3, 'Headphones', 'Accessories', 100.00),
(4, 'Shoes', 'Fashion', 80.00),
(5, 'Watch', 'Fashion', 150.00);

-- Inserting data into OrderDetails
INSERT INTO OrderDetails VALUES
(201, 101, 1, 1, 1000.00),
(202, 102, 2, 1, 500.00),
(203, 103, 3, 2, 200.00),
(204, 104, 4, 3, 240.00),
(205, 105, 5, 1, 150.00);

-- Inserting data into CustomerEngagement
INSERT INTO CustomerEngagement VALUES
(301, 1, '2024-01-08', 2, 500.00, '2024-01-10'),
(302, 2, '2024-01-06', 1, 150.00, '2024-01-07'),
(303, 3, '2024-01-07', 1, 75.00, '2024-01-07'),
(304, 4, '2024-01-09', 1, 500.00, '2024-01-09'),
(305, 5, '2024-01-05', 1, 200.00, '2024-01-06');

-- Queries

-- 1. Calculate the average order value per customer segment
SELECT c.CustomerSegment, AVG(o.TotalAmount) AS AvgOrderValue
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerSegment;

-- 2. Customer lifetime value calculation
SELECT c.CustomerID, c.Name, SUM(o.TotalAmount) AS CLV
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerID, c.Name;

-- 3. Order frequency per customer segment
SELECT c.CustomerSegment, COUNT(o.OrderID) AS OrderFrequency
FROM Customers c
JOIN Orders o ON c.CustomerID = o.CustomerID
GROUP BY c.CustomerSegment;

-- 4. Retention vs churn trends (Active vs inactive customers)
SELECT c.CustomerID, c.Name, 
       CASE 
           WHEN MAX(e.LastPurchaseDate) > DATE_SUB(CURDATE(), INTERVAL 6 MONTH) THEN 'Active'
           ELSE 'Churned'
       END AS CustomerStatus
FROM Customers c
JOIN CustomerEngagement e ON c.CustomerID = e.CustomerID
GROUP BY c.CustomerID, c.Name;

-- 5. Total revenue per product category
SELECT p.Category, SUM(od.Price * od.Quantity) AS TotalRevenue
FROM Products p
JOIN OrderDetails od ON p.ProductID = od.ProductID
GROUP BY p.Category;

-- 6. Monthly revenue trend
SELECT YEAR(OrderDate) AS Year, MONTH(OrderDate) AS Month, SUM(TotalAmount) AS Revenue
FROM Orders
GROUP BY YEAR(OrderDate), MONTH(OrderDate)
ORDER BY Year, Month;

-- 7. Most popular products by sales volume
SELECT p.ProductName, SUM(od.Quantity) AS TotalSold
FROM Products p
JOIN OrderDetails od ON p.ProductID = od.ProductID
GROUP BY p.ProductName
ORDER BY TotalSold DESC
LIMIT 5;

-- 8. Customer segments with highest retention rates
SELECT c.CustomerSegment, COUNT(*) AS ActiveCustomers
FROM Customers c
JOIN CustomerEngagement e ON c.CustomerID = e.CustomerID
WHERE e.LastPurchaseDate > DATE_SUB(CURDATE(), INTERVAL 6 MONTH)
GROUP BY c.CustomerSegment
ORDER BY ActiveCustomers DESC;

-- 9. Identify high-value customers with high engagement
SELECT c.CustomerID, c.Name, e.TotalOrders, e.TotalSpent
FROM Customers c
JOIN CustomerEngagement e ON c.CustomerID = e.CustomerID
WHERE e.TotalSpent > (SELECT AVG(TotalSpent) FROM CustomerEngagement)
AND e.TotalOrders > (SELECT AVG(TotalOrders) FROM CustomerEngagement)
ORDER BY e.TotalSpent DESC;

-- 10. Find the average customer age per segment
SELECT CustomerSegment, AVG(Age) AS AvgAge
FROM Customers
GROUP BY CustomerSegment;
